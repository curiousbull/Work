#+TITLE: Pandas Tutorial Notebook
#+AUTHOR: 胡琛
* 导入模块
  
  #+BEGIN_SRC python
    import numpy as np
    import pandas as pd
    import matploblib.pyplot as plt
  #+END_SRC

* 对象创建 (Object Creation)
  
** Series

   #+BEGIN_SRC python
     s = pd.Series([1,3,5,np.nan,6,8])
   #+END_SRC

** DataFrame

   #+BEGIN_SRC python
     dates = pd.date_range('20130101', periods = 6)
     df = pd.Dataframe(np.random.randn(6,4), index=dates,columns=list('ABCD'))
   #+END_SRC

   #+BEGIN_SRC python
     df2 = pd.DataFrame({'A':1,
                         'B':pd.Timestamp('20130102'),
                         'C':np.array([3]*4,dtype='int32'),
                         'D':pd.Series(1,index=list(range(4)),dtype='float32'),
                         'E':pd.Categorical(['test','train','test','train']),
                         'F':'foot'})
   #+END_SRC

* 查看数据

  1. 查看头部

     #+BEGIN_SRC python
       df.head()
     #+END_SRC

  2. 查看尾部
     #+BEGIN_SRC python
       df.tail(3)
     #+END_SRC
       
  3. 显示索引、列和底层的 numpy 数据
     #+BEGIN_SRC python
       df.index()
       df.columns()
       df.values()
     #+END_SRC

  4. =describe= 对数据统计快速汇总
     #+BEGIN_SRC python
       df.describe()
     #+END_SRC
      
  5. 对数据转置
     #+BEGIN_SRC python
       df.T
     #+END_SRC
       
  6. 按轴进行排序
     #+BEGIN_SRC python
       df.sort_index(axis=1,acending=False)
     #+END_SRC
       
  7. 按值进行排序
     #+BEGIN_SRC python
       df.sort('B')
     #+END_SRC
* 数据选择
** 取出数据
   1. 取出单独的列，格式为 'Series', 下述命令也可用 =df.A=
      #+BEGIN_SRC python
        df['A']
      #+END_SRC
   2. 通过切片获取数据 --> *注意用切片获取行数据时，两种方式，取的行范围，前者取 0,1,2 行，后者取 '2013-01-01' 到 '2013-01-03'，包括 '2013-01-03'*
      #+BEGIN_SRC python
        df[0:3]
      #+END_SRC
      或
      #+BEGIN_SRC python
        df['2013-01-01':'2013-01-03']
      #+END_SRC
** 通过 Label 选择
   1. For getting a cross section using a label
      #+BEGIN_SRC python
        df.loc[dates[0]]
      #+END_SRC
   2. Selectiing on a multi-axis by label
      #+BEGIN_SRC python
        df.loc[:,['A','B']]
      #+END_SRC
   3. Showing label slicing, *both endpoints are included*
      #+BEGIN_SRC python
        df.loc['20130102':'20130104',['A','B']]
      #+END_SRC
   4. For getting a scalar value
      #+BEGIN_SRC python
        df.loc[dates[0],'A']
      #+END_SRC
** 通过 Position 选择
   1. Select via the position of the passed integers
      #+BEGIN_SRC python
        df.iloc[3]
      #+END_SRC
   2. By integer slices, acting similar to numpy/python 
      #+BEGIN_SRC python
        df.iloc[3:5,0:2]
      #+END_SRC
   3. By lists of integer position location, similar to the numpy/python style
      #+BEGIN_SRC python
        df.iloc[[1,2,4],[0,2]]
      #+END_SRC
   4. For slicing rows explicitly
      #+BEGIN_SRC python
        df.iloc[1:3,:]
      #+END_SRC
   5. For slicing colums explicitly
      #+BEGIN_SRC python
        df.iloc[:,1:3]
      #+END_SRC
   6. For getting fast access to a scalar
      #+BEGIN_SRC python
        df.iat[1,1]
      #+END_SRC
** Boolean Indexing
   1. Using a single column's values to select data
      #+BEGIN_SRC python
        df[df.A > 0]
      #+END_SRC
   2. A where operation for getting
      #+BEGIN_SRC python
        df[df > 0]
      #+END_SRC
   3. Using the =isin()= method for filtering
      #+BEGIN_SRC python
        df2 = df.copy()
        df2['E'] = ['one', 'two', 'three', 'four', 'five']
        df2[df2['E'].isin(['one','four'])]
      #+END_SRC
** Setting
   1. Setting a column automatically aligns the dates by the indexes
      #+BEGIN_SRC python
        s1 = pd.Series([1,2,3,4,5,6], index=pd.date_range('20130102',periods=6))
        df['F'] = s1
      #+END_SRC
   2. Setting values by label
      #+BEGIN_SRC python
        df.at[dates[0],'A'] = 0
      #+END_SRC
   3. Setting values by position 
      #+BEGIN_SRC python
        df.iat[0,1] = 0
      #+END_SRC
   4. Setting by assigning with a numpy array
      #+BEGIN_SRC python
        df.loc[:,'D'] = np.array([5]*len(df))
      #+END_SRC
   5. A where operation with setting
      #+BEGIN_SRC python
        df2 = df.copy()
        df2[df2 > 0] = -df2
      #+END_SRC
* 缺失数据处理
  pandas 主要用 'np.nan' 作为缺失数据，该值不会参与运算
  1. reindexing 允许你 change/add/delete 指定轴上的 index. 该操作会返回数据的 copy
     #+BEGIN_SRC python
       df1 = df.reindex(index=dates[0:4], columns = list(df.columns) + ['E'])
       df1.loc[dates[0]:dates[1], 'E'] = 1
     #+END_SRC
  2. *To drop any rows that have missing data*
     #+BEGIN_SRC python
       df1.dropna(how='any')
     #+END_SRC
  3. Fill missing data
     #+BEGIN_SRC python
       df1.fillna(value=5)
     #+END_SRC
  4. To get boolean mask where values are nan
     #+BEGIN_SRC python
       pd.isnull(df1)
     #+END_SRC
* 操作
  Operation in general exclude missing data
** 统计
   1. Performing a descriptive statics
      #+BEGIN_SRC python
        df.mean()
      #+END_SRC
   2. Same operation on the other axis
      #+BEGIN_SRC python
        df.mean(1)
      #+END_SRC
   3. Operating with objects that have different dimensionality and need alignment. 
      In addition, pandas automatically broadcasts along the specified dimension.
      #+BEGIN_SRC python
        s = pd.Series([1,3,5,np.nan,5,8], index=dates).shift(2)
        df.sub(s,axis='index')
      #+END_SRC
** 应用
   1. Applying functions to the data
      #+BEGIN_SRC python
        df.apply(np.cumsum)
      #+END_SRC
** 直方图
** String Methods
* 合并

* 分组

* 重组 (Reshaping)

* 时间序列

* 分类

* 作图

* 数据导入导出

* 陷阱
